<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小圆季节灏文档|小圆季节灏信息码获取</title>
    <link href="/2022/09/03/ASL-V3-docs/"/>
    <url>/2022/09/03/ASL-V3-docs/</url>
    
    <content type="html"><![CDATA[<h1 id="小圆季节灏"><a href="#小圆季节灏" class="headerlink" title="小圆季节灏"></a>小圆季节灏</h1><p>GitHub地址：<a href="https://github.com/charlesix59/QDU_AFL_V3">https://github.com/charlesix59/QDU_AFL_V3</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>腾讯真的恶心，直接填个人信息无法过审，所以我就只能曲线救国了。</p><p>信息代码的获取方法在操作指南中</p><p>乞望见谅</p><p>2022.9.3</p><hr><p>有些事说是小心也好，说是形式也罢。</p><p>但是体现在个人身上，是痛苦与气愤。</p><p>我对如是行径感到恶心。</p><p>虽然大多是为了自己，如果下次又有魑魅魍魉在人间横行，我依然会用自己的方式祛魅。</p><p>2022.9.2</p><hr>某大学终于打开了虚妄的门扉，推倒了染血的藩篱。这是一场胜利，或许是。<p>有幸看到<b><strong>小圆</strong></b>在此刻退休，目前仍未更新的版本也不会再继续更新了。</p><p>对于小圆的退休我并不感到遗憾</p><blockquote><p>但愿世间人无病，何妨架上药生尘。</p></blockquote><p>我们还有别的战场要奔赴，哪里有压迫，哪里就有反抗。不合理仍然存在，以真理之名，我仍要与这些恶魔战斗。</p><p>无论如何，很高兴看到这一片光辉闪烁着，我们可以暂时唱着欢歌，相拥而眠；不必枕戈待旦，横刀冷对了。</p><p>今天，它退休了，但当黑暗再次笼罩之时，我仍将燃起炬火，予你微弱的光芒。</p><p>5.26</p><hr><p>最近校园集结号迁移到微信小程序了，于是我又赶出来一个。</p><p>因为是微信小程序，大家能在微信中直接搜索到我就不上传gitee了</p><p>从网页到mui到微信小程序这都第三版了，考虑要不要直接uniapp……（那我就快要成为真正的集结号了）</p><h3 id="早期版本"><a href="#早期版本" class="headerlink" title="早期版本"></a>早期版本</h3><p>V2版本：<a href="https://gitee.com/charles-min/QDU_ASLv2">校园集结号自主请假: 勾勾啊哈哈 (gitee.com)</a></p><p>V1版本：<a href="https://github.com/charlesix59/QDU_self_ASF_web">charlesix59&#x2F;QDU_self_ASF_web (github.com)</a></p><h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><blockquote><p>沉默呵，沉默呵！不在沉默中爆发，就在沉默中灭亡——鲁迅</p></blockquote><blockquote><p>哪里有压迫哪里就有反抗——毛泽东</p></blockquote><p>信息码获取</p><p>其实原理非常简单，只需要您填写一个json文件，格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的名字&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的学号&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sclass&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的班级&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;collage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的学院&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你导员的大号&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的电话&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你要去的地方&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dormitory&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的住处&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>复制一份到任意文本编辑器，修改各个值为你需要的值，然后复制，粘贴到小程序中的信息码文本框即可</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>小程序</tag>
      
      <tag>文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>核酸上课论</title>
    <link href="/2022/09/02/a-article-about-NAT-and-AC/"/>
    <url>/2022/09/02/a-article-about-NAT-and-AC/</url>
    
    <content type="html"><![CDATA[<h1 id="核酸上课论"><a href="#核酸上课论" class="headerlink" title="核酸上课论"></a>核酸上课论</h1><p>夫核酸、上课者，大学之道也，不可以不审慎也。今日之势，欲核酸并上课。孟子云：“鱼我所欲也，熊掌我所欲也，二者不可得兼。”<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="出自《孟子注疏》卷十一下〈告子章句上〉">[1]</span></a></sup>今核酸上课犹如二虎<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="《礼记·檀弓下》：“夫子曰：‘小子识之：苛政猛于虎也。’">[2]</span></a></sup>，二强相争不得俱全。</p><p>依余愚见，当舍上课而取核酸者也。夫上课者，桃李之所硕者也<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="《韩诗外传》卷七:夫春树桃李，夏得阴其下，秋得食其实。学生之谓也">[3]</span></a></sup>；夫核酸者，印佩<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="苏轼《渔家傲》：腰跨金鱼旌旆拥。将何用。只堪妆点浮生梦。泛指官位">[4]</span></a></sup>之所全也。若舍上课，虽不成蹊<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="《史记》卷一百九〈李将军列传〉：桃李本不能言，但以华实感物，故人不期而往，其下自成蹊径也。">[5]</span></a></sup>，可保五斗<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="《宋书》卷九十三〈隐逸列传·陶潜〉：郡遣督邮至，县吏白应束带见之，潜叹曰：「我不能为五斗米折腰向乡里小人。」即日解印绶去职。赋归去来。泛指官位">[6]</span></a></sup>；若舍核酸而取上课，则桃之夭夭<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="《诗·周南·桃夭》：“桃之夭夭，灼灼其华。”喻事物的繁荣兴盛">[7]</span></a></sup>徒做金衣<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="秦韬玉《贫女》：苦恨年年压金线，为他人作嫁衣裳。">[8]</span></a></sup>而已。核酸者，天下之神器<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="《老子》：“将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之。”此指政治">[9]</span></a></sup>也，死生利害，不可以不深思而慎取之也！</p><p>吾尝闻，夫上善若水<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="《老子》：“上善若水“">[10]</span></a></sup>，水之型也，避上而趋下<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="《孙子兵法·虚实篇》：兵形象水，水之形，避高而趋下">[11]</span></a></sup>。今上催之甚急，而下则多受其惠，盍罢黜百科，独尊核酸。核酸一出，则万民归顺，百邦来朝，上颜大悦，岂不早当封侯之位，列三公之重。</p><p>余虽卑鄙，躬耕阳郡<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="诸葛亮《出师表》：臣本布衣，躬耕于南阳，苟全性命于乱世。孔明阳郡人也">[12]</span></a></sup>，苟全性命于乱世。今蒙重恩，得效犬马之劳，不敢不殚精竭虑以事明主。愿明公以核酸为重，上承皇恩，下顺民意，若有不服管束贻误核酸者，当重斥赋黄；而意在鸿鹄<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="《史记》卷四十八〈陈涉世家〉：陈涉太息曰：「嗟乎，燕雀安知鸿鹄之志哉！」">[13]</span></a></sup>、常念斩蛇者<sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="《史记》卷八〈高祖本纪〉：」高祖醉，曰：「壮士行，何畏！」乃前，拔剑击斩蛇。蛇遂分为两，径开。">[14]</span></a></sup>，立斩不赦。如是，则天下幸甚，社稷幸甚，明公亦可高卧安眠，指日高升<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="《梦笔生花·杭州俗语杂对》：“望风下拜，指日高升。”">[15]</span></a></sup>也。</p><p>诗云：战战兢兢，如临深渊，如履薄冰<sup id="fnref:16" class="footnote-ref"><a href="#fn:16" rel="footnote"><span class="hint--top hint--rounded" aria-label="《小雅·节南山之什·小旻》：战战兢兢，如临深渊，如履薄冰。指面对政局谨慎">[16]</span></a></sup>，此余所以事明主也。愿明公听之任之，早做决断，若迁延时日，恐生不测。余伏惟圣鉴，再拜以闻。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>出自《孟子注疏》卷十一下〈告子章句上〉<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>《礼记·檀弓下》：“夫子曰：‘小子识之：苛政猛于虎也。’<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>《韩诗外传》卷七:夫春树桃李，夏得阴其下，秋得食其实。学生之谓也<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>苏轼《渔家傲》：腰跨金鱼旌旆拥。将何用。只堪妆点浮生梦。泛指官位<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>《史记》卷一百九〈李将军列传〉：桃李本不能言，但以华实感物，故人不期而往，其下自成蹊径也。<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>《宋书》卷九十三〈隐逸列传·陶潜〉：郡遣督邮至，县吏白应束带见之，潜叹曰：「我不能为五斗米折腰向乡里小人。」即日解印绶去职。赋归去来。泛指官位<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>《诗·周南·桃夭》：“桃之夭夭，灼灼其华。”喻事物的繁荣兴盛<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>秦韬玉《贫女》：苦恨年年压金线，为他人作嫁衣裳。<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>《老子》：“将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之。”此指政治<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>《老子》：“上善若水“<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>《孙子兵法·虚实篇》：兵形象水，水之形，避高而趋下<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>诸葛亮《出师表》：臣本布衣，躬耕于南阳，苟全性命于乱世。孔明阳郡人也<a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>《史记》卷四十八〈陈涉世家〉：陈涉太息曰：「嗟乎，燕雀安知鸿鹄之志哉！」<a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>《史记》卷八〈高祖本纪〉：」高祖醉，曰：「壮士行，何畏！」乃前，拔剑击斩蛇。蛇遂分为两，径开。<a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:15" class="footnote-text"><span>《梦笔生花·杭州俗语杂对》：“望风下拜，指日高升。”<a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:16" class="footnote-text"><span>《小雅·节南山之什·小旻》：战战兢兢，如临深渊，如履薄冰。指面对政局谨慎<a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
      <category>古文</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>修复fluid的tags中的词云tag跳转异常问题</title>
    <link href="/2022/09/01/fluid-tags-bug-fix/"/>
    <url>/2022/09/01/fluid-tags-bug-fix/</url>
    
    <content type="html"><![CDATA[<h1 id="修复fluid的tags中的词云tag跳转异常问题"><a href="#修复fluid的tags中的词云tag跳转异常问题" class="headerlink" title="修复fluid的tags中的词云tag跳转异常问题"></a>修复fluid的tags中的词云tag跳转异常问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在尝试搭建自己的blog，再再三考量之下选择了<strong>hexo</strong>，不得不说这个blog框架还是很香的，配合github的托管能够快速搭建一个界面美观的博客。</p><p>但是在使用的过程中我发现了一个小问题，就是博客的tags并不能正常工作。</p><p>当我们从首页中的tag跳转时，可以跳转到正常的界面，如图：</p><p><img src="./img1.png"></p><p><font color=red>但是当我从tags界面的词云中跳转时就会出现错误</font></p><p><img src="./img2.png"></p><p>错误界面如图:</p><p><img src="./img3.png"></p><span id="more"></span><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><font color=red>我们可以很明显的观测到问题——url地址错误，重复了一次’tags&#x2F;‘目录</font></p><p>我们首先说解决方案：</p><p><font color=red>找到目录<code>&lt;your hexo dirctory&gt;\node_modules\hexo\lib\plugins\helper</code>中的tagcloud.js文件，将文件第71行改为：</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`&lt;a href=&quot;<span class="hljs-subst">$&#123;url_for.call(<span class="hljs-variable language_">this</span>, tag.path).substring(<span class="hljs-number">5</span>)&#125;</span>&quot; style=&quot;<span class="hljs-subst">$&#123;style&#125;</span>&quot;<span class="hljs-subst">$&#123;attr&#125;</span>&gt;<span class="hljs-subst">$&#123;transform ? transform(tag.name) : tag.name&#125;</span>&lt;/a&gt;`</span><br><span class="hljs-comment">//原代码为：</span><br><span class="hljs-comment">//`&lt;a href=&quot;$&#123;url_for.call(this, tag.path))&#125;&quot; style=&quot;$&#123;style&#125;&quot;$&#123;attr&#125;&gt;$&#123;transform ? transform(tag.name) : tag.name&#125;&lt;/a&gt;`</span><br><span class="hljs-comment">//加上了一个子字符串分割</span><br></code></pre></td></tr></table></figure><p><em><strong>注意！这个方法只适合跟我描述的错误相同的朋友，如果问题不同请不要随意更改！</strong></em></p><h2 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h2><p>这一部分讲述我怎么分析并解决问题的，如果不感兴趣可以直接关掉网页了</p><p>首先发现到这一点后，我企图弄清楚fluid是如何生成tags这个html文件的。但是我观察文件夹时并没有和明显的察觉到这一点。于是我找到<code>public</code>文件夹，<strong>这个文件夹存放的是通过hexo生成的html文件。</strong> 然后我们找到<code>tags</code>文件夹下的<code>index.html</code>   文件，随着翻阅html文件，我发现了这样的一块代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center tagcloud&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tags/node-js/&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 15px; color: #bbe&quot;</span>&gt;</span>node.js<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tags/前端/&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 15px; color: #bbe&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>毫无疑问，这就是生成词云的代码，但是我已经生成为html的文件我们并不能直接改，因为如果要这样解决问题，每次生成新的html之后我们都要手动修改一次，这是很没有效率的。于是我们顺藤摸瓜继续寻找问题。</p><p>于是我在webstrom使用<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>r</kbd>全局查找tagcloud，发现在fluid的layout中有一个名为<code>tags.ejs</code>文件，这显然是生成tags的文件之一。其中有这样的一块代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;text-center tagcloud&quot;&gt;<br>  &lt;%- tagcloud(&#123;<br>    min_font: min_font,<br>    max_font: max_font,<br>    amount: 999,<br>    unit: unit,<br>    color: true,<br>    start_color,<br>    end_color<br>  &#125;) %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>很明显，这是生成上面那个html的映射文件，但是这其中依然没有修改herf的方法。于是我们继续向源头寻找。</p><p>然后我们发现tagcloud包是被引用进来的，而他的源码就在我们面提到过的文件夹中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`&lt;a href=&quot;<span class="hljs-subst">$&#123;url_for.call(<span class="hljs-variable language_">this</span>, tag.path)&#125;</span>&quot; style=&quot;<span class="hljs-subst">$&#123;style&#125;</span>&quot;<span class="hljs-subst">$&#123;attr&#125;</span>&gt;<span class="hljs-subst">$&#123;transform ? transform(tag.name) : tag.name&#125;</span>&lt;/a&gt;`</span><br></code></pre></td></tr></table></figure><p>这一行很明显就是生成每个小tag的代码。虽然我们看不太懂<code>$&#123;url_for.call(this, tag.path)&#125;</code>这行代码的意思，但是我们知道最终他都会被解析为字符串。如果你熟悉js，就会知道js拥有将所有东西转化为字符串的能力😂因此我们直接使用substring方法来更改这一行代码就可以解决问题了</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用node.js创建一个todo列表——node.js服务器搭建、json读写以及使用pm2保持服务运行</title>
    <link href="/2022/08/30/to-do-list-by-nodeJS/"/>
    <url>/2022/08/30/to-do-list-by-nodeJS/</url>
    
    <content type="html"><![CDATA[<h1 id="使用node-js创建一个todo列表——node-js服务器搭建以及json读写"><a href="#使用node-js创建一个todo列表——node-js服务器搭建以及json读写" class="headerlink" title="使用node.js创建一个todo列表——node.js服务器搭建以及json读写"></a>使用node.js创建一个todo列表——node.js服务器搭建以及json读写</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些日子学习了 nodejs ，顺理成章的想要找点东西练练手。恰好最近需要一个简介的todo list网页，因为之前用的一些todo list应用都被墙了，访问速度感人，于是就想自己搞一个todo。</p><p>而恰好，我要搞的todo是一个非常简单的程序，非常适合用nodejs这样的解释型脚本语言来实现，比起java这样光搭框架就要半天的专注大型项目的语言，nodejs 的优势就是非明显了。</p><span id="more"></span><p>nodejs搭建服务器只需要去nodejs官网复制这样的一块代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hi!&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server ready&#x27;</span>))<br></code></pre></td></tr></table></figure><p>所以我们可以把更多的经历放在我们的业务实现上。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>在开始动工之前，要先列出需求。当时我的需求如下：</p><ul><li><p>添加需要做的事情</p></li><li><p>展示需要做的事情</p></li><li><p>完成需要做的事情</p></li><li><p>查看曾经完成的事情</p></li></ul><h3 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h3><p>对于上述需求，我打算这样实现：</p><ul><li><p>使用json文件系统实现持久化操作</p></li><li><p>使用nodejs来获取数据</p></li><li><p>使用nodejs来处理数据并储存数据</p></li></ul><p>这样的话。明确了需求与实现方式，我们就可以动工了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="json读写"><a href="#json读写" class="headerlink" title="json读写"></a>json读写</h3><p>nodejs提供了一套文件的读写的模块：<code>fs</code>。使用fs可以很简单的实现文本文件的读写。但是为了我们在开发的时候更加方便，我又将他封装成了一个专注json读写的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//in jsonHandler.js</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readJson</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-keyword">let</span> jsonFile = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;./&quot;</span>+name);<br>    <span class="hljs-keyword">let</span> toDoList = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonFile);    <span class="hljs-comment">//解析json，并直接返回json对象</span><br>    <span class="hljs-keyword">return</span> toDoList;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">writeJson</span>(<span class="hljs-params">name,data</span>)&#123;<br>    fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&quot;./&quot;</span>+name,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    readJson,<br>    writeJson<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h3><p>还记得我们的服务器的格式吗？我们先定义一下我们的服务器接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//in index.js</span><br><span class="hljs-keyword">const</span> jh = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./jsonHandler&quot;</span>)<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br><span class="hljs-keyword">let</span> workList = jh.<span class="hljs-title function_">readJson</span>(<span class="hljs-string">&quot;list.json&quot;</span>);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头与请求编码</span><br>    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span><br>    <span class="hljs-comment">//设置字节流编码为utf-8</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain;charset=utf8&#x27;</span>)<br>    <span class="hljs-comment">//设置允许跨域</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br>    req.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br><br>    <span class="hljs-comment">//write your code here</span><br><br>    <span class="hljs-keyword">let</span> ret=<span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">//这是需要返回的数据</span><br>    res.<span class="hljs-title function_">end</span>(ret)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>&#125;)<br></code></pre></td></tr></table></figure><p>然后根据我们的需求分析，先来确定以下API接口：</p><ul><li><p><code>addWork()</code>:用来添加一个任务并将数据保存到json</p></li><li><p><code>deleteWord(res)</code>:用来将一个任务删除并将数据保存到json</p></li><li><p><code>writeHistory(work)</code>:将完成的任务添加到历史记录中</p></li><li><p><code>getAllWork()</code>:获取目前正在运行中的任务</p></li></ul><p>首先我们先开始addWork()的编写，要添加的话，首先要接受并解析客户端发送的请求，然后再储存到json中，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用来增加一个任务</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addWork</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> work=<span class="hljs-string">&quot;&quot;</span>;<br>        req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;    <span class="hljs-comment">//接受客户端发送的请求流</span><br>            <span class="hljs-comment">//这里要取子串的原因是请求会带key，我这里是work=xxx，所以要将&#x27;work=&#x27;去掉</span><br>            work=chunk.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">substring</span>(<span class="hljs-number">5</span>);<br>            <span class="hljs-comment">//设置编码，不然中文会乱码</span><br>            work = <span class="hljs-built_in">decodeURIComponent</span>(work);<br>            <span class="hljs-comment">//解析worklist</span><br>            <span class="hljs-keyword">let</span> jsonObj=<span class="hljs-built_in">eval</span>(workList)<br>            jsonObj.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-string">&quot;work&quot;</span>:work&#125;)<br>            <span class="hljs-comment">//将数据写回</span><br>            jh.<span class="hljs-title function_">writeJson</span>(<span class="hljs-string">&quot;list.json&quot;</span>,jsonObj)<br>        &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>任务历史与添加任务几乎同理，只不过这个方法获取的数据是deleteWork提供的，我们不需要再去监控客户端的请求。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//任务历史</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">writeHistory</span>(<span class="hljs-params">work</span>) &#123;<br>        <span class="hljs-keyword">let</span> jsonStr = jh.<span class="hljs-title function_">readJson</span>(<span class="hljs-string">&quot;history.json&quot;</span>);<br>        <span class="hljs-keyword">let</span> jsonObj = <span class="hljs-built_in">eval</span>(jsonStr);<br>        <span class="hljs-keyword">let</span> event = &#123;&#125;<br>        event.<span class="hljs-property">work</span> = work;<br>        event.<span class="hljs-property">finishTime</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        jsonObj.<span class="hljs-title function_">push</span>(event);<br>        jh.<span class="hljs-title function_">writeJson</span>(<span class="hljs-string">&quot;history.json&quot;</span>,jsonObj)<br>    &#125;<br></code></pre></td></tr></table></figure><p>删除任务也是同理，我们要在前端给每个任务隐性的标上index，然后就可以用来删除了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//删除任务</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteWork</span>(<span class="hljs-params">res</span>)&#123;<br>        req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`可用的数据块: <span class="hljs-subst">$&#123;chunk&#125;</span>`</span>)<br>            <span class="hljs-comment">//获取点击事件的位置</span><br>            <span class="hljs-keyword">let</span> index=chunk.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">let</span> jsonObj=<span class="hljs-built_in">eval</span>(workList)<br>            <span class="hljs-comment">//添加历史</span><br>            <span class="hljs-keyword">let</span> work = jsonObj[index].<span class="hljs-property">work</span><br>            <span class="hljs-title function_">writeHistory</span>(work)<br>            <span class="hljs-comment">//删除</span><br>            jsonObj.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// console.log(jsonObj)</span><br>            jh.<span class="hljs-title function_">writeJson</span>(<span class="hljs-string">&quot;list.json&quot;</span>,jsonObj)<br>        &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>获取任务就非常简单了，我们只需要从json中拿到数据并转发给客户端就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取所有任务</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAllWork</span>(<span class="hljs-params"></span>)&#123;<br>        workList=jh.<span class="hljs-title function_">readJson</span>(<span class="hljs-string">&quot;list.json&quot;</span>);<br>        ret=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(workList);<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后呢，我们需要写一个路由解析，因为js非常小，所以这些东西都写在一个文件里面就可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/解析路由<br>    <span class="hljs-keyword">let</span> pathname = url.<span class="hljs-title function_">parse</span>(req.<span class="hljs-property">url</span>).<span class="hljs-property">pathname</span>;<br>    <span class="hljs-comment">//路由配置</span><br>    <span class="hljs-keyword">if</span> (pathname===<span class="hljs-string">&quot;/getAllWork&quot;</span>)&#123;<br>        <span class="hljs-title function_">getAllWork</span>()<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pathname===<span class="hljs-string">&quot;/addWork&quot;</span>)&#123;<br>        <span class="hljs-title function_">addWork</span>()<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pathname===<span class="hljs-string">&quot;/deleteWork&quot;</span>)&#123;<br>        <span class="hljs-title function_">deleteWork</span>()<br>    &#125;<br></code></pre></td></tr></table></figure><p>随下贴出前端源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;-- in index.html --&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ch&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.simplecss.org/simple.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;technological.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech-background&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> wish you a substantial day<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>to do list<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add-work&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add-work&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech-input&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 70%&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;addWork()&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech-btn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: inline;&quot;</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">        &#x27;use strict&#x27;</span></span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:3000/getAllWork&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">crossDomain</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> con=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> workList=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res)</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(workList)</span><br><span class="language-javascript">                workList=<span class="hljs-built_in">eval</span>(workList)</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;workList.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> list=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;label&quot;</span>);</span><br><span class="language-javascript">                    list.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;&lt;input name=\&quot;work-list\&quot; id=\&quot;work&quot;</span>+i+<span class="hljs-string">&quot;\&quot; value=&#x27;&quot;</span>+workList[i].<span class="hljs-property">work</span>+<span class="hljs-string">&quot;&#x27; class=&#x27;tech-input&#x27; style=\&quot;width: 70%\&quot;&gt; &quot;</span> +</span><br><span class="language-javascript">                        <span class="hljs-string">&quot;&lt;button onclick=&#x27;deleteWork(this)&#x27; id=&#x27;&quot;</span>+i+<span class="hljs-string">&quot;&#x27; class=&#x27;tech-btn&#x27; style=\&quot;display: inline;\&quot;&gt;完成&lt;/button&gt;&quot;</span>;</span><br><span class="language-javascript">                    con.<span class="hljs-title function_">appendChild</span>(list);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">addWork</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> work=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;add-work&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/addWork&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">crossDomain</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;work&quot;</span>:work</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// alert(&quot;success&quot;);</span></span><br><span class="language-javascript">                    location.<span class="hljs-title function_">reload</span>();</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteWork</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> index=res.<span class="hljs-property">id</span>;</span><br><span class="language-javascript">            $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/deleteWork&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">crossDomain</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;id&quot;</span>:index</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// alert(&quot;success&quot;);</span></span><br><span class="language-javascript">                    location.<span class="hljs-title function_">reload</span>();</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个项目的源码我也会放在GitHub（因为项目实在太小我甚至都没有建一个文件夹）</p><p><a href="https://github.com/charlesix59/todo_list_by_nodeJS">项目地址</a></p><h2 id="保持代码运行"><a href="#保持代码运行" class="headerlink" title="保持代码运行"></a>保持代码运行</h2><p>我们服务器代码当然要有一个服务器去运行，而这个迷你的项目显然不值得让我们去分配他一个云服务器加一个域名，那么我们是否可以把这个服务运行在本地呢？</p><p>可是运行在本地就需要频繁的重启服务，每次开机都要启动一次，这未免也太麻烦了。于是我们就可以使用<strong>pm2</strong>来使我们的项目保持运行</p><p>关于pm2我在此不多赘述了，大家有兴趣的可以自行百度搜索，我只给出部署的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install pm2 -g #全局安装pm2<br>cd &lt;项目目录&gt;<br>pm2 start index.js --watch<br>pm2 save<br>pm2 list<br></code></pre></td></tr></table></figure><p>如果你部署成功，那么当你运行<code>pm2 list</code>之后你就可以看到你的项目了</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
